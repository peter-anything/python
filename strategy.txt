策略模式
能把一系列“可互换的”算法封装起来，并根据用户需要来选择其中的一种。
Examples：
#encoding: utf-8
import sys
if sys.version_info[:2] < (3, 2):
    from xml.sax.saxutils import escape
else:
    from html import escape

WINNERS = ("Nikolai Andrianov", "Matt Biondi", "Bjorn Dahlie",
        "Birgit Fischer", "Sawao Kato", "Larisa Latynina", "Carl Lewis",
        "Michael Phelps", "Mark Spitz", "Jenny Thompson")

class Layout(object):

    def __init__(self, tabulator):
        self.tabulator = tabulator

    def tabulate(self, rows, items):
        return self.tabulator.tabulate(rows, items)

class Tabulator(object):
    """docstring for ClassName"""
    def tabulate(self, rows, items):
        raise NotImplementedError()

class HtmlTabulator(object):
    def tabulate(self, rows, items):
        columns, remainder = divmod(len(items), rows)
        if remainder:
            columns += 1
        column = 0
        table = ['<table border="1">\n']
        for item in items:
            if column == 0:
                table.append("<tr>")
            table.append("<td>{}</td>".format(escape(str(item))))
            column += 1
            if column == columns:
                table.append("</tr>\n")
            column %= columns
        if table[-1][-1] != '\n':
            table.append('</tr>\n')
        table.append('</table>\n')
        return "".join(table)

class TextTabulator(object):
    def tabulate(self, rows, items):
        columns, remainder = divmod(len(items), rows)
        if remainder:
            columns += 1
            remainder = (rows * columns) - len(items)
            if remainder == columns:
                remainder = 0
        column = column_width = 0
        for item in items:
            column_width = max(column_width, len(item))
        column_divider = ('-' * (column_width + 2)) + '+'
        divider = '+' + (column_divider * columns) + '\n'
        table = [divider]
        for item in items + (('', ) * remainder):
            if column == 0:
                table.append('|')
            table.append(' {:<{}} |'.format(item, column_width))
            print len(' {:<{}} |'.format(item, column_width))
            column += 1
            if column == columns:
                table.append('\n')
            column %= columns
        table.append(divider)
        return ''.join(table)


