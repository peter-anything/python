责任链模式
可将请求的发送与处理请求的接收方解耦。这样的话，某函数不用直接调用别的函数了，而是可以把请求发送给一个由
诸多接受者组成的链条。链条中的首个接收者可以接收请求并停止责任链，也可以把请求转发给下一个接收者。而第二
个接收者也有这两种选择，此过程可以一直延续到最后一个接收者，该接收者可以将请求抛弃，也可抛出异常。

普通实现1.
#!/usr/bin/env python
# encoding:utf-8
class NullHandler(object):
    def __init__(self, successor = None):
        self.__successor = successor

    def handle(self, event):
        if self.__successor is not None:
            self.__successor.handle(event)

class ConcretHandler1(NullHandler):
    def handle(self, event):
        if event > 0 and event <= 10:
            print "in handler1", event
        else:
            super(ConcretHandler1, self).handle(event)

class ConcretHandler2(NullHandler):
    def handle(self, event):
        if event > 10 and event <= 20:
            print "in handler2", event
        else:
            super(ConcretHandler2, self).handle(event)

class ConcretHandler3(NullHandler):
    def handle(self, event):
        if event > 20 and event <= 30:
            print "in handler3", event
        else:
            super(ConcretHandler3, self).handle(event)

handler = ConcretHandler3(ConcretHandler2(ConcretHandler1(NullHandler())))
events = [2, 5, 14, 22, 18, 3, 35, 27, 20, 0]
for event in events:
    handler.handle(event)

实现2：
基于协程实现的
import functools

def coroutine(function):
    @functools.wraps(function)
    def wrapper(*args, **kwargs):
        generator = function(*args, **kwargs)
        next(generator)
        return generator
    return wrapper

@coroutine
def key_handler(successor = None):
    while True:
        event = (yield)
        if 0 < event <= 10:
            print('key_handler Press: {}'.format(event))
        elif successor is not None:
            successor.send(event)

@coroutine
def mouse_handler(successor = None):
    while True:
        event = (yield)
        if 10 < event <= 20:
            print('mouse_handler Press: {}'.format(event))
        elif successor is not None:
            successor.send(event)

pipeline = key_handler(mouse_handler())
events = [2, 5, 14, 22, 18, 3, 35, 27, 20, 0]
for event in events:
    pipeline.send(event)
