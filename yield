class Fab(object):

    def __init__(self, max):
        self.max = max
        self.n, self.a, self.b = 0, 0, 1

    def __iter__(self):
        return self

    def next(self):
        if self.n < self.max:
            yield self.b
            self.a, self.b = self.b, self.a + self.b
            self.n += 1

        raise StopIteration()

def fab(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n += 1
        return

for n in fab(10):
    print n

from inspect import isgeneratorfunction

print isgeneratorfunction(fab)

import types

print(isinstance(fab, types.GeneratorType))

print(isinstance(fab(5), types.GeneratorType))

最基本的generator是实现__iter__和next方法，使用yield编译器会默认把这个方法当成generator function
