状态模式
可用来设计其行为随状态而变的对象
Examples:
import collections
import random

class Counter(object):
    def __init__(self, *names):
        self.anonymous = not bool(names)
        if self.anonymous:
            self.count = 0
        else:
            for name in names:
                setattr(self, name, 0)

    def __call__(self, event):
        if self.anonymous:
            self.count += event.count
        else:
            count = getattr(self, event.name)
            setattr(self, event.name, count + event.count)

class Event(object):

    def __init__(self, name, count = 1):
        self.name = name
        self.count = count

#普通方法实现，在执行其中的一些重要方法时候，都要判断state值。
class MultiplexerV1(object):
    ACTIVE, DORMANT = ('ACTIVE', 'DORMANT')

    def __init__(self):
        self.callbacks_for_event = collections.defaultdict(list)
        self.state = Multiplexer.ACTIVE

    def connect(self, event_name, callback):
        if self.state == Multiplexer.ACTIVE:
            self.callbacks_for_event[event_name].append(callback)

    def disconnect(self, event_name, callback):
        if self.state == Multiplexer.ACTIVE:
            if callback is None:
                del self.callbacks_for_event[event_name]
            else:
                self.callbacks_for_event[event_name].remove(callback)

    def send(self, event):
        if self.state == Multiplexer.ACTIVE:
            for callback in self.callbacks_for_event.get(event.name, []):
                callback(event)

#属性方法实现，在设置state值的时候，同时也设置对应的重要方法。
class Multiplexer(object):
    ACTIVE, DORMANT = ('ACTIVE', 'DORMANT')

    def __init__(self):
        self.callbacks_for_event = collections.defaultdict(list)

    @property
    def state(self):
        return (Multiplexer.ACTIVE if self.send == self.__active_send else self.DORMANT)

    @state.setter
    def state(self, state):
        if state == Multiplexer.ACTIVE:
            self.connect = self.__active_connect
            self.send = self.__active_send
            self.disconnect = self.__active_disconnect
        else:
            self.connect = lambda *args: None
            self.send = lambda *args: None
            self.disconnect = lambda *args: None

    def __active_connect(self, event_name, callback):
        self.callbacks_for_event[event_name].append(callback)

    def __active_disconnect(self, event_name, callback):
        if callback is None:
            del self.callbacks_for_event[event_name]
        else:
            self.callbacks_for_event[event_name].remove(callback)

    def __active_send(self, event):
        for callback in self.callbacks_for_event.get(event.name, []):
            callback(event)

names = ['cars', 'vans', 'trucks']
def generate_event():
    name = names[random.randint(0, 2)]
    return Event(name)

def generate_random_events(n):
    events = []
    for i in xrange(n):
        events.append(generate_event())
    return events

total_counter = Counter()
car_counter = Counter('cars')
commercial_counter = Counter('vans', 'trucks')
multiplexer = Multiplexer()
multiplexer.state = 'ACTIVE1'
for event_name, callback in [('cars', car_counter), ('vans', commercial_counter), ('trucks', commercial_counter)]:
    multiplexer.connect(event_name, callback)
    multiplexer.connect(event_name, total_counter)
for event in generate_random_events(100):
    multiplexer.send(event)
print('After 100 active events: cars={}, vans = {}, trucks={}, total={}').format(car_counter.cars, commercial_counter.vans, commercial_counter.trucks, total_counter.count)
