1. 单一责任原则

一个对象只对一个元素负责

优点;
　　消除耦合，减小因需求变化引起代码僵化

2. 开放封闭原则

例如装饰器，可以对独立的功能实现扩展，但对源码不能进行修改
对扩展开放，对修改封闭

　　　　优点：
　　　　　　按照OCP原则设计出来的系统，降低了程序各部分之间的耦合性，其适应性、灵活性、稳定性都比较好。当已有软件系统需要增加新的功能时，

　　　　　　不需要对作为系统基础的抽象层进行修改，只需要在原有基础上附加新的模块就能实现所需要添加的功能。增加的新模块对原有的模块完全没有影响或影响很小，

　　　　　　这样就无须为原有模块进行重新测试

　　　　如何实现 ？　

　　　　　　在面向对象设计中，不允许更必的是系统的抽象层，面允许扩展的是系统的实现层，所以解决问题的关键是在于抽象化。

　　　　　　在面向对象编程中，通过抽象类及接口，规定具体类的特征作为抽象层，相对稳定，不需要做更改的从面可以满足“对修改关闭”的原则；而从抽象类导出的具体 类可以

　　　　　　改变系统 的行为，从而满足“对扩展开放的原则"

3. 里氏替换原则


子类可以替换父类，父类出现的地方都可以用子类替换
可以使用任何派生类（子类）替换基类

　　　　优点：
　　　　　　可以很容易的实现同一父类下各个子类的互换，而客户端可以毫不察觉

4. 接口分享原则


对于接口进行分类避免一个接口的方法过多，避免”胖接口"
　　　　优点：
　　　　　　会使一个软件系统功能扩展时，修改的压力不会传到别的对象那里
　　　　如何实现 ?
　　　　　　得用委托分离接口
　　　　　　利用多继承分离接口

5. 依赖倒置原则


高层模块不应该依赖低层模块，二者都应该依赖其抽象（理解为接口）；抽象不应该依赖细节；细节应该依赖抽象　　　

隔离关系，使用接口或抽象类代指
高层次的模块不应该依赖于低层次的模块，而是，都应该依赖于抽象
　　　　优点：
　　　　　　使用传统过程化程序设计所创建的依赖关系，策略依赖于细节，这是糟糕的，因为策略受到细节改变的影响。
　　　　　　依赖倒置原则使细节和策略都依赖于抽象，抽象的稳定性决定了系统的稳定性

6. 依赖注入和控制反转原则

使用钩子再原来执行流程中注入其他对象